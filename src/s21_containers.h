//
// Created by alex on 27.02.24.
//

#ifndef CPP2_S21_CONTAINERS_1_SRC_S21_CONTAINERS_H_
#define CPP2_S21_CONTAINERS_1_SRC_S21_CONTAINERS_H_
/**
 * @mainpage Реализация библиотеки stl
 * Данный проект представляет реализацию библиотеки stl в соответствии с UML
 * диаграммой
 * @section UML UML диаграмма
 * @image html STL_UML.png
 * Вся работа выполнена в соответствии с данной UML диаграммой. Также
 * реализованы некоторые интерфейсы обозначенные на диаграмме шрифтом Italic.
 * В частности интерфейс Sequence Container @ref SqContainer.h. Далее был
 * реализован класс avl дерева для реализации контейнеров класса
 * Sorted Container.
 *
 * @section ExplanationAvl Общая информация об Avl дереве.
 * Структура дерева представляет собой бинарное дерево. Все ключи этого дерева
 * упорядочены по правилам простого бинарного дерева. Таким образом слева от
 * корня всегда расположено значение меньше корня, а с права значение большее
 * корня. Но с одной особенностью: любые два подузла узла дерева отличаются
 * высотами не более чем на единицу. Под высотой понимается расстояние до листа
 * поддерева.
 *
 * Далее необходимо паралельно изучать реализацию в файле @ref AvlTree.h
 *
 * @section ImplementationAvl Реализация
 * Первым выполняемым шагом является реализация в @ref AvlTree.h простого
 * доступа к элементам структуры и некоторые простые плгоритмы для работы с
 * ними. К ним относятся FixHeight, GetHeight, BalanceFactor. Они в основ
 * выполняют роль геттеров для некоторых метрик АВЛ дерева. В частности
 * BalanceFactor дает представление о разности высот поддеревьев данного узла. А
 * GetHeight обеспечивает безопасный доступ к высоте узла.
 *
 * Вторым шагом были разработаны некоторые методы для реализации, собственно,
 * самой задумки АВЛ дерева. Это RotateLeft, RotateRight, Balance. Первые два
 * осуществляют простые повороты дерева. Основная иде заключается в перемещении
 * левого(правого) узла на место корня, и смещение предыдущего корня на
 * право(лево).
 * @image html rotates.png
 * Balance -- это некоторая комбинация двух простых поворотов, если это нужно.
 * Например в самом простом случае, если высота s непревосходит высоты D, то
 * выполнять двойной поворот смысла не имеет, а нужно сделать простой поворот, в
 * зависимости от знака
 * @image html balance_simple.png
 * Если же ситуация сложнее, то необходим большой поворот или двойной. Он
 * выполняется при условии, что высота s больше высоты D.
 * @image html double_balance.png
 */
/**
 * @file
 * @brief заголовочный файл библиотеки stl без расширенных контейнеров
 */

#include <iostream>
#include <limits>

#include "functions/include/s21_list.h"
#include "functions/include/s21_map.h"
#include "functions/include/s21_queue.h"
#include "functions/include/s21_set.h"
#include "functions/include/s21_stack.h"
#include "functions/include/s21_vector.h"

#endif  // CPP2_S21_CONTAINERS_1_SRC_S21_CONTAINERS_H_
