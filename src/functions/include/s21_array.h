#ifndef CPP2_S21_CONTAINERS_1_SRC_FUNCTIONS_INCLUDE_ARRAY_H_
#define CPP2_S21_CONTAINERS_1_SRC_FUNCTIONS_INCLUDE_ARRAY_H_

#include "../../s21_containers.h"

namespace s21 {

/**
 * Шаблонный класс array представляет собой динамический массив элементов типа
 * T. Поддерживает основные операции работы с массивом.
 *
 * @tparam T Тип элементов массива.
 */
template <typename T>
class array {
 public:
  // внутриклассовые переопределения типов
  /*
   * Тип элементов массива.
   */
  using value_type = T;

  /*
   * Ссылка на элемент массива.
   */
  using reference = value_type &;

  /*
   * Константная ссылка на элемент массива.
   */
  using const_reference = const value_type &;

  /*
   * Итератор для доступа к элементам массива.
   */
  using iterator = T *;

  /*
   * Константный итератор для доступа к элементам массива.
   */
  using const_iterator = const T *;

  /*
   * Тип для хранения размера массива.
   */
  using size_type = size_t;

  // основные публичные методы для взаимодействия с классом

  /**
   * Конструктор по умолчанию.
   */
  array();

  /**
   * Конструктор инициализации массива заданным списком элементов.
   *
   * @param items Список элементов для инициализации массива.
   */
  array(std::initializer_list<value_type> const &items);

  /**
   * Конструктор копирования.
   *
   * @param a Копируемый массив.
   */
  array(const array &a);

  /**
   * Конструктор перемещения.
   *
   * @param a Массив, из которого происходит перемещение.
   */
  array(array &&a);

  /**
   * Деструктор, освобождает выделенную память.
   */
  ~array();

  /**
   * Оператор перемещения.
   *
   * @param a Массив, из которого происходит перемещение.
   * @return Ссылка на текущий массив.
   */
  array &operator=(array &&a) noexcept;

  // публичные методы для доступа к элементам класса

  /**
   * Доступ к элементу массива по указанному индексу с проверкой выхода за
   * границы.
   *
   * @param pos Индекс элемента.
   * @return Ссылка на элемент массива по заданному индексу.
   * @throws std::out_of_range В случае выхода за границы массива.
   */
  reference at(size_type pos);

  /**
   * Доступ к элементу массива по указанному индексу без проверки выхода за
   * границы.
   *
   * @param pos Индекс элемента.
   * @return Ссылка на элемент массива по заданному индексу.
   */
  reference operator[](size_type pos) { return data_[pos]; }

  /**
   * Доступ к первому элементу массива.
   *
   * @return Константная ссылка на первый элемент массива.
   */
  const_reference front();

  /**
   * Доступ к последнему элементу массива.
   *
   * @return Константная ссылка на последний элемент массива.
   */
  const_reference back();

  /**
   * Возвращает указатель на первый элемент массива.
   *
   * @return Указатель на первый элемент массива.
   */
  T *data() { return data_; }

  // публичные методы для итерирования по элементам класса

  /**
   * Возвращает указатель на начало массива (итератор).
   *
   * @return Итератор, указывающий на начало массива.
   */
  iterator begin() { return data_; }

  /**
   * Возвращает указатель на конец массива (итератор).
   *
   * @return Итератор, указывающий на элемент за последним элементом массива.
   */
  iterator end() { return data_ + size_; }

  // методы для доступа к информации о наполнении контейнера:

  /**
   * Проверяет, пуст ли массив.
   *
   * @return true, если массив пуст, иначе false.
   */
  bool empty() { return size_ == 0; }

  /**
   * Возвращает текущий размер массива.
   *
   * @return Размер массива.
   */
  size_type size() { return size_; }

  /**
   * Возвращает максимально возможный размер массива.
   *
   * @return Максимально возможный размер массива.
   */
  size_type max_size();

  // методы для изменения контейнера

  /**
   * Обменивает содержимое текущего массива с содержимым другого массива.
   *
   * @param other Другой массив для обмена.
   */
  void swap(array &other);

  /**
   * Заполняет все элементы массива заданным значением.
   *
   * @param value Значение, которым заполняются элементы массива.
   */
  void fill(const_reference value);

 private:
  T *data_; /**< Указатель на массив элементов типа T. */
  size_type size_; /**< Текущий размер массива. */
};
}  // namespace s21

#include "../templates/s21_array.tpp"

#endif  // CPP2_S21_CONTAINERS_1_SRC_FUNCTIONS_INCLUDE_ARRAY_H_
