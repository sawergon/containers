#ifndef CPP2_S21_CONTAINERS_1_SRC_FUNCTIONS_INCLUDE_vector_H_
#define CPP2_S21_CONTAINERS_1_SRC_FUNCTIONS_INCLUDE_vector_H_

#include "../../s21_containers.h"

/**
 * Пространство имён для класса vector.
 */
namespace s21 {

/**
 * Класс vector - динамический массив, хранящий элементы типа T.
 * @tparam T Тип элементов, хранящихся в векторе.
 */
template <typename T>
class vector {
 public:
  // внутриклассовые переопределения типов

  /**
   * Тип элементов, хранящихся в векторе.
   */
  using value_type = T;

  /**
   * Ссылка на элемент в векторе.
   */
  using reference = value_type &;

  /**
   * Константная ссылка на элемент в векторе.
   */
  using const_reference = const value_type &;

  /**
   * Итератор для доступа к элементам вектора.
   */
  using iterator = T *;

  /**
   * Константный итератор для доступа к элементам вектора.
   */
  using const_iterator = const T *;

  /**
   * Тип, используемый для представления размера вектора.
   */
  using size_type = size_t;

  // основные публичные методы для взаимодействия с классом

  /**
   * Конструктор по умолчанию для класса vector.
   * Создает пустой вектор.
   */
  vector();

  /**
   * Конструктор, создающий вектор заданного размера.
   * @param n Размер вектора.
   */
  vector(size_type n);

  /**
   * Конструктор, создающий вектор из списка инициализации.
   * @param items Список инициализации.
   */
  vector(std::initializer_list<value_type> const &items);

  /**
   * Конструктор копирования для класса vector.
   * Создает копию существующего вектора.
   * @param v Ссылка на вектор, который необходимо скопировать.
   */
  vector(const vector &v);

  /**
   * Конструктор перемещения для класса vector.
   * Перемещает содержимое другого вектора в новый вектор.
   * @param v R-value ссылка на вектор, который необходимо переместить.
   */
  vector(vector &&v);

  /**
   * Оператор перемещения присваивания для класса vector.
   * Перемещает содержимое другого вектора в данный вектор.
   * @param v R-value ссылка на вектор, который необходимо переместить.
   * @return Ссылка на текущий вектор после перемещения.
   */
  vector &operator=(vector &&v) noexcept;

  // vector& operator++(vector &&v); итератор ??

  /**
   * Дуструктор для класса vector.
   * Удаляет созданный вектор.
   */
  ~vector();

  // публичные методы для доступа к элементам класса
  /**
   * Получение ссылки на элемент по заданной позиции в векторе.
   * @param pos Позиция элемента в векторе.
   * @return Ссылка на элемент по указанной позиции.
   * @throws std::out_of_range Если позиция выходит за пределы вектора.
   */
  reference at(size_type pos);

  /**
   * Получение ссылки на элемент по заданной позиции в векторе.
   * @param pos Позиция элемента в векторе.
   * @return Ссылка на элемент по указанной позиции.
   */
  reference operator[](size_type pos) { return data_[pos]; }

  /**
   * Получение константной ссылки на первый элемент в векторе.
   * @return Константная ссылка на первый элемент в векторе.
   * @throws std::out_of_range Если вектор пуст.
   */
  const_reference front();

  /**
   * Получение константной ссылки на последний элемент в векторе.
   * @return Константная ссылка на последний элемент в векторе.
   * @throws std::out_of_range Если вектор пуст.
   */
  const_reference back();

  /**
   * Получение указателя на первый элемент в векторе.
   * @return Указатель на первый элемент в векторе.
   */
  T *data() { return data_; }

  // методы для итерирования по элементам класса
  /**
   * Получение итератора, указывающего на начало вектора.
   * @return Итератор, указывающий на начало вектора.
   */
  iterator begin() { return data_; }

  /**
   * Получение итератора, указывающего на конец вектора.
   * @return Итератор, указывающий на конец вектора.
   */
  iterator end() { return data_ + size_; }

  // методы для доступа к информации о наполнении контейнера:
  /**
   * Проверка, пуст ли вектор.
   * @return True, если вектор пуст, иначе false.
   */
  bool empty() { return size_ == 0; }

  /**
   * Получение размера вектора.
   * @return Размер вектора.
   */
  size_type size() { return size_; }

  /**
   * Получение максимально возможного размера вектора.
   * @return Максимально возможный размер вектора.
   */
  size_type max_size();

  /**
   * Резервирование памяти для заданного размера.
   * Если текущая емкость вектора меньше заданного размера, реаллокирует память.
   * @param size Размер для резервирования.
   */
  void reserve(size_type size);

  /**
   * Получение текущей емкости вектора.
   * @return Текущая емкость вектора.
   */
  size_type capacity() { return capacity_; }

  /**
   * Уменьшение емкости вектора до его текущего размера.
   */
  void shrink_to_fit();

  // методы для изменения контейнера

  /**
   * Очистка вектора.
   * @note noexcept указывает на то, что функция не генерирует исключений.
   */
  void clear() noexcept;

  /**
   * Вставка элемента в заданную позицию.
   * @param pos Итератор на позицию, в которую необходимо вставить элемент.
   * @param value Значение элемента для вставки.
   * @return Итератор на вставленный элемент.
   */
  iterator insert(iterator pos, const_reference value);

  /**
   * Удаление элемента из заданной позиции.
   * @param pos Итератор на позицию элемента для удаления.
   */
  void erase(iterator pos);

  /**
   * Добавление элемента в конец вектора.
   * @param value Значение элемента для добавления.
   */
  void push_back(const_reference value);

  /**
   * Удаление последнего элемента из вектора.
   */
  void pop_back();

  /**
   * Обмен содержимым двух векторов.
   * @param other Второй вектор для обмена содержимым.
   * @note Функция не генерирует исключений.
   */
  void swap(vector &other) noexcept;

  // методы для переменного числа аргументов в шаблонах функций
  /**
   * Вставляет элементы `args` перед указанной позицией `pos` в вектор.
   * Использует переменное число аргументов для вставки нескольких элементов
   * одновременно.
   *
   * @tparam T Тип элементов вектора.
   * @tparam Args Типы аргументов, которые будут вставлены.
   * @param pos Константный итератор, указывающий на позицию вставки.
   * @param args Аргументы, которые будут вставлены перед позицией `pos`.
   * @return Итератор, указывающий на первый вставленный элемент.
   */
  template <class... Args>
  typename vector<T>::iterator insert_many(
      typename vector<T>::const_iterator pos, Args &&...args);

  /**
   * Вставляет элементы `args` в конец вектора.
   * Использует переменное число аргументов для вставки нескольких элементов
   * одновременно.
   *
   * @tparam T Тип элементов вектора.
   * @tparam Args Типы аргументов, которые будут вставлены.
   * @param args Аргументы, которые будут вставлены в конец вектора.
   */
  template <typename... Args>
  void insert_many_back(Args &&...args);

 private:
  iterator data_; /**< Указатель на начало выделенной памяти для хранения
                     элементов вектора. */
  size_type size_; /**< Текущий размер вектора (количество элементов). */
  size_type
      capacity_; /**< Текущая емкость вектора (количество выделенной памяти). */
};
}  // namespace s21

#include "../templates/s21_vector.tpp"

#endif  // CPP2_S21_CONTAINERS_1_SRC_FUNCTIONS_INCLUDE_vector_H_
